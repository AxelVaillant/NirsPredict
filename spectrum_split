# -*- coding: utf-8 -*-
"""
Created on Mon Jun 22 11:51:50 2020
Split data based on Kennard-Stone algo applied to spectral values by class
@author: cornet
"""

import pandas as pd
import kenStone as ks
from sklearn import decomposition
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Get data and split it into train test sets
# First column should be Y (analyte) and all others should be spectrum values
def DataSplit(filepath, Decimal: str = ',', Header='infer', TestProp=0.3, rep=1):
    xy = pd.read_table(filepath, header=None, decimal=Decimal, sep=';')
    FileName=filepath.split("/")[2].split(".")[0]
    xy.insert(loc=0, column='ID', value=xy.index)
    xy = xy.dropna()
    
    # Split by rep
    # todo insert a test to check if counts of unique values are multiple of REP
    xyl=[]
    for i in range(rep):
        xyl.append(xy.iloc[xy.reset_index(drop=True).index[i::rep]].reset_index(drop=True))
    
    # KenStone Split
    KSindex=ks.kennardstonealgorithm(xyl[0].iloc[:,1:(xyl[0].shape[1])], round((1-TestProp)*xyl[0].shape[0]))  
    
    # Gather reps
    xycal=pd.DataFrame(columns=xy.columns)
    xyval=pd.DataFrame(columns=xy.columns)
    for i in range(rep):
        xycal=xycal.append(xyl[i].iloc[KSindex[0], :])
        xyval=xyval.append(xyl[i].iloc[KSindex[1], :])
    Xcal=xycal.iloc[:,2:]
    Xval=xyval.iloc[:,2:]
    Ycal=xycal.iloc[:,0:2]
    Yval=xyval.iloc[:,0:2]  
    
    # # PCA
    # xycal.insert(0, "Split", 'Calib')
    # xyval.insert(0, "Split", 'Valid')
    # dff=pd.concat([xycal, xyval], ignore_index=True)
    # features=dff.iloc[:, 3:]
    # labels=dff.iloc[:, 0]
    # pca = decomposition.PCA(n_components=2)
    # features_pca = pca.fit_transform(features)
    
    # color_labels = labels.unique()
    # rgb_values = sns.color_palette("Set2", 2)
    # color_map = dict(zip(color_labels, rgb_values))
    # plt.figure(figsize=(8,8))
    # for label in np.unique(labels):
    #     plt.scatter(features_pca[labels==label, 0], features_pca[labels==label, 1],
    #                 label=label, c=color_map[label], edgecolor='', alpha=0.95)
    # plt.xlabel('PC 1 (%.2f%%)' % (pca.explained_variance_ratio_[0]*100))
    # plt.ylabel('PC 2 (%.2f%%)' % (pca.explained_variance_ratio_[1]*100)) 
    # plt.legend()
    # plt.show()
    # plt.savefig('./out/' + FileName + '_PCA_KenStoneSplit.png', figsize=(8,8))
    
    # Xcal.to_csv('./data_Stefania/' + FileName + '_Xcal.csv')
    # Ycal.to_csv('./data_Stefania/' + FileName + '_Ycal.csv')
    # Xval.to_csv('./data_Stefania/' + FileName + '_Xval.csv')
    # Yval.to_csv('./data_Stefania/' + FileName + '_Yval.csv') 
    
    np.savetxt('./data/' + FileName + '/Xcal.csv', Xcal, delimiter=";")
    np.savetxt('./data/' + FileName + '/Ycal.csv', Ycal, delimiter=";")
    np.savetxt('./data/' + FileName + '/Xval.csv', Xval, delimiter=";")
    np.savetxt('./data/' + FileName + '/Yval.csv', Yval, delimiter=";")

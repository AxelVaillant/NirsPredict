# -*- coding: utf-8 -*-
"""
Created on Wed Feb 26 11:01:54 2020

@author: rouan, cornet
"""
import sys
sys.path.insert(1, './scripts')
import numpy as np
import random
import Spectrum_load as Loader
import pandas as pd
from pandas import read_csv, concat

# Noise definition => Rotate and translate
def anglePointFixe(x,xI,yI,p1,p2):   
    if x <= xI:
        return(p1*(x-xI)+yI)
    else:
        return(p2*(x-xI)+yI)
v_anglePointFixe = np.vectorize(anglePointFixe) #vectorisation 

## Data augmentation
def DataAugment(FileName, Dist, AugmFactor, HEADER):
    xcal = read_csv('./data/' + FileName + '/split/Xcal.csv', header=None, sep=r'\,|\;', engine='python')
    ycal = read_csv('./data/' + FileName + '/split/Ycal.csv', header=None, sep=r'\,|\;', engine='python')

    nbSamples = xcal.shape[0]
    nfreq = xcal.shape[1]
    x_range = np.linspace(0, 1, nfreq)
    XcalAugm = np.zeros((nbSamples*AugmFactor,nfreq))
    YcalAugm = []
    for i in range(0, nbSamples):
        y0 = xcal.iloc[i]
        ycal_i=ycal.iloc[[i]] 
        STD=np.std(y0)
        MAX=np.max(y0)
        for s in range(0, AugmFactor):
            p2 = random.uniform(-2,2)
            p1 = random.uniform(-2,2)
            xI = random.uniform(0,1)
            yI = random.uniform(0, MAX/3)
            distor = v_anglePointFixe(x_range,xI,yI,p1,p2)
            distor = distor*STD
            y_distor = y0 + distor
            ROW=i*AugmFactor+s
            NewSpec=np.array(y_distor, ndmin=2)
            XcalAugm[ROW][:] = NewSpec
            YcalAugm.append(ycal_i)  
    if (Dist=='KeepDist'):   
        Xcal=np.append(XcalAugm, xcal, axis=0)
        YcalAugm=pd.concat(YcalAugm, ignore_index=True)
        Ycal=np.concatenate((YcalAugm, ycal), axis=0)
       
    elif (Dist=='UniDist'):
        Xcal= np.empty((0, XcalAugm.shape[1]))
        Ycal=[]
        YcalAugm=pd.concat(YcalAugm, ignore_index=True)
        # add a class column
        YcalAugmBins=np.digitize(YcalAugm, np.linspace(np.min(YcalAugm), np.max(YcalAugm), 11)[:10])
        # Keep the same nb of each class in Augmented datasets
        Avalues, Acounts = np.unique(np.array(YcalAugmBins), axis=0, return_counts=True)
        MinClassNb = Acounts[np.argmin(Acounts)]
        
        for i in range(len(Avalues)):
            Index_label_i = np.where(YcalAugmBins[:]==i)
            XcalA_i=XcalAugm[Index_label_i][:]
            XcalA_i=XcalA_i[:MinClassNb][:]
            YcalA_i=YcalAugm[Index_label_i][:]
            YcalA_i=YcalA_i[:MinClassNb][:]
            Xcal=np.append(Xcal, XcalA_i, axis=0)
            Ycal=np.concatenate((Ycal, YcalA_i), axis=0)
        
        Xcal=np.append(Xcal, xcal, axis=0)
        Ycal=np.concatenate((Ycal, ycal[:,0]), axis=0)
        
    else:
        print('Missing required distribution argument (e.g. KeepDist to keep initial distribution or UniDist to uniformize distribution)')
    
    Xcal=pd.DataFrame(Xcal)
    Ycal=pd.DataFrame(Ycal)
    
    # Xcal.to_csv('./data/' + FileName + '/split/' + Dist + '_Xcal.csv', sep=";", header=None, index=None)
    # Ycal.to_csv('./data/' + FileName + '/split/' + Dist + '_Ycal.csv', sep=";", header=None, index=None)
    
    np.savetxt('./data/' + FileName + '/split/' + Dist + '_Xcal.csv', Xcal, delimiter=";")
    np.savetxt('./data/' + FileName + '/split/' + Dist + '_Ycal.csv', Ycal, delimiter=";")
    
